Pre-emptive:

#include <stdio.h> 
#include <limits.h> 
struct Process { 
 int pid, at, bt, pr, ct, wt, tat, rt, remaining; 
}; 
void findPreemptivePriorityScheduling(struct Process p[], int n) { 
 int completed = 0, time = 0, min_idx = -1; 
 float totalWT = 0, totalTAT = 0; 
 for (int i = 0; i < n; i++) { 
 p[i].remaining = p[i].bt; 
 p[i].rt = -1; 
 } 
 while (completed != n) { 
 int min_priority = INT_MAX; 
 min_idx = -1;  
 for (int i = 0; i < n; i++) { 
 if (p[i].at <= time && p[i].remaining > 0 && p[i].pr < min_priority) {  min_priority = p[i].pr; 
 min_idx = i; 
 } 
 }  
 if (min_idx == -1) { 
 time++; 
 continue; 
 } 
  
 if (p[min_idx].rt == -1) {
 p[min_idx].rt = time - p[min_idx].at;                                                                                               
 } 
  
 p[min_idx].remaining--; 
 time++; 
  
 if (p[min_idx].remaining == 0) { 
 completed++; 
 p[min_idx].ct = time; 
 p[min_idx].tat = p[min_idx].ct - p[min_idx].at; 
 p[min_idx].wt = p[min_idx].tat - p[min_idx].bt; 
 totalWT += p[min_idx].wt; 
 totalTAT += p[min_idx].tat; 
 } 
 } 
  
 printf("PID\tAT\tBT\tPR\tCT\tTAT\tWT\tRT\n"); 
 for (int i = 0; i < n; i++) { 
 printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",  
 p[i].pid, p[i].at, p[i].bt, p[i].pr, p[i].ct, p[i].tat, p[i].wt, p[i].rt);  } 
 printf("\nAverage Turnaround Time: %.2f\n", totalTAT / n);  printf("Average Waiting Time: %.2f\n", totalWT / n); 
} 
int main() { 
 int n; 
 printf("Enter the number of processes: "); 
 scanf("%d", &n); 
 struct Process p[n];  
 printf("Enter Arrival Time, Burst Time, and Priority for each process:\n");  for (int i = 0; i < n; i++) { 
 p[i].pid = i + 1; 
 printf("Process %d: ", i + 1); 
 scanf("%d %d %d", &p[i].at, &p[i].bt, &p[i].pr); 
 }

 findPreemptivePriorityScheduling(p, n); 
 return 0; 
} 


Nom pre-emptive:

#include <stdio.h> 
struct Process { 
 int pid, at, bt, pr, ct, wt, tat, rt; 
 int isCompleted; // Flag to check if process is completed 
}; 
void sortByArrival(struct Process p[], int n) { 
 for (int i = 0; i < n - 1; i++) { 
 for (int j = i + 1; j < n; j++) { 
 if (p[i].at > p[j].at) { 
 struct Process temp = p[i];
 p[i] = p[j]; 
 p[j] = temp; 
 } 
 } 
 } 
}                                                                                                                                   
void findPriorityScheduling(struct Process p[], int n) {       sortByArrival(p, n); 
 int time = 0, completed = 0; 
 float totalWT = 0, totalTAT = 0; 
  
 while (completed < n) { 
 int idx = -1, highestPriority = 9999; 
  
 for (int i = 0; i < n; i++) { 
 if (p[i].at <= time && p[i].isCompleted == 0) {  if (p[i].pr < highestPriority) { 
 highestPriority = p[i].pr; 
 idx = i; 
 } 
 } 
 } 
  
 if (idx == -1) { 
 time++; // CPU idle 
 } else { 
 p[idx].rt = time - p[idx].at; 
 time += p[idx].bt; 
 p[idx].ct = time; 
 p[idx].tat = p[idx].ct - p[idx].at; 
 p[idx].wt = p[idx].tat - p[idx].bt; 
 p[idx].isCompleted = 1; 
  
 totalWT += p[idx].wt; 
 totalTAT += p[idx].tat; 
 completed++; 
 } 
 } 
  
 printf("PID\tAT\tBT\tPR\tCT\tTAT\tWT\tRT\n"); 
 for (int i = 0; i < n; i++) { 
 printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",  
 p[i].pid, p[i].at, p[i].bt, p[i].pr, p[i].ct, p[i].tat, p[i].wt, p[i].rt);  } 
                                                                                                                                      
 printf("\nAverage Turnaround Time: %.2f\n", totalTAT / n);  printf("Average Waiting Time: %.2f\n", totalWT / n); 
} 
int main() { 
 int n; 
 printf("Enter the number of processes: "); 
 scanf("%d", &n); 
 struct Process p[n]; 
  
 printf("Enter Arrival Time, Burst Time, and Priority for each process:\n");  for (int i = 0; i < n; i++) { 
 p[i].pid = i + 1; 
 printf("Process %d: ", i + 1); 
 scanf("%d %d %d", &p[i].at, &p[i].bt, &p[i].pr); 
 p[i].isCompleted = 0; 
 } 
  
 findPriorityScheduling(p, n); 
 return 0; 
}



