FIFO:

#include <stdio.h>
#define MAX_FRAMES 10
void fifo(int pages[], int n, int frames) {
    int pageFaults = 0;
    int frame[MAX_FRAMES];
    int front = 0;
    int i, j, found;

    for (i = 0; i < frames; i++)
        frame[i] = -1;  

    for (i = 0; i < n; i++) {
        found = 0;
        for (j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                Break;                                                                                                                       
            }
        }

        if (!found) {
            frame[front] = pages[i];  
            front = (front + 1) % frames;  
            pageFaults++;
        }

        printf("Frames: ");
        for (j = 0; j < frames; j++) {
            if (frame[j] == -1)
                printf("- ");
            else
                printf("%d ", frame[j]);
        }
        printf("\n");
    }
    printf("Total Page Faults (FIFO): %d\n", pageFaults);
}
                                                                                                                                                   
int main() {
    int n, frames;
    int pages[MAX_FRAMES];

    printf("Enter the number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    printf("\nFIFO Page Replacement:\n");
    fifo(pages, n, frames);

    return 0;
}


LPU:

#include <stdio.h>
#define MAX_FRAMES 10

void lru(int pages[], int n, int frames) {
    int pageFaults = 0;
    int frame[MAX_FRAMES];                                                                                              
    int lastUsed[MAX_FRAMES];
    int i, j, found, oldest, pos;

    for (i = 0; i < frames; i++)
        frame[i] = -1;

    for (i = 0; i < frames; i++)
        lastUsed[i] = -1;

    for (i = 0; i < n; i++) {
        found = 0;
        for (j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                lastUsed[j] = i;
                break;
            }
        }

        if (!found) {
            oldest = i;
            pos = -1;
            for (j = 0; j < frames; j++) {                                                                                        
                if (frame[j] == -1) {
                    pos = j;
                    break;
                }
                if (lastUsed[j] < oldest) {
                    oldest = lastUsed[j];
                    pos = j;
                }
            }

            frame[pos] = pages[i];
            lastUsed[pos] = i;
            pageFaults++;
        }

        printf("Frames: ");
        for (j = 0; j < frames; j++) {
            if (frame[j] == -1)
                printf("- ");
            else
                printf("%d ", frame[j]);
        }
        printf("\n");                                                                                                                   
    }
    printf("Total Page Faults (LRU): %d\n", pageFaults);
}

int main() {
    int n, frames;
    int pages[MAX_FRAMES];

    printf("Enter the number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    printf("\nLRU Page Replacement:\n");
    lru(pages, n, frames);

    return 0;
}


Optimal:

#include <stdio.h>

#define MAX_FRAMES 10

void optimal(int pages[], int n, int frames) {
    int pageFaults = 0;
    int frame[MAX_FRAMES];
    int i, j, k, found, farthest, pos;
                                                                                                                                              
    for (i = 0; i < frames; i++)
        frame[i] = -1;  

    for (i = 0; i < n; i++) {
        found = 0;
        for (j = 0; j < frames; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            farthest = -1;
            pos = -1;
            for (j = 0; j < frames; j++) {
                int nextUse = -1;
                for (k = i + 1; k < n; k++) {
                    if (pages[k] == frame[j]) {
                        nextUse = k;
                        break;
                    }
                }                                                                                                                              

                if (nextUse == -1) {
                    pos = j;
                    break;
                }

                if (nextUse > farthest) {
                    farthest = nextUse;
                    pos = j;
                }
            }

            frame[pos] = pages[i];
            pageFaults++;
        }

        printf("Frames: ");
        for (j = 0; j < frames; j++) {
            if (frame[j] == -1)
                printf("- ");
            else
                printf("%d ", frame[j]);
        }                                                                                                                                       
        printf("\n");
    }
    printf("Total Page Faults (Optimal): %d\n", pageFaults);
}

int main() {
    int n, frames;
    int pages[MAX_FRAMES];

    printf("Enter the number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    printf("\nOptimal Page Replacement:\n");
    optimal(pages, n, frames);
                                                                                                                                                 
    return 0;
}


